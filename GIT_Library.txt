$ git help
$ git help <command>
$ git config --global user.name "<username>"
$ git config --global user.email <email@example.net>
$ git config --global color.ui true
$ git config --global core.editor 		emacs interactive commands
$ git config --global merge.tool opendiff 	use opendiff for merging conflicts
$ git config --list
$ git config user.email

$ mkdir store
$ cd store
$ git init

$ git status

$ git add <file.txt>

$ git commit -m "<message>"

$ git add <file1> <file2>
$ git add --all

$ git log

$ git add <list of files> 		Add the list of files
$ git add --all 			Add all files
$ git add *.txt 			Add all txt files in current directory
$ git add docs/*.txt 			Add all txt files in docs directory
$ git add docs/ 			Add all files in docs directory
$ git add "*.txt" 			Add all txt files in the whole project

$ git diff

$ git diff --staged

$ git reset HEAD <file>

$ git checkout -- <file>

$ git commit -a -m "<message>"

$ git reset --soft HEAD^ 		Undo last commit, put changes into staging
git reset --hard HEAD^ 			Undo last $ commit and all changes
$ git commit --amend -m "<message>" 	Change the last commit
$ git reset --hard HEAD^^ 		Undo last 2 commits and all changes

$ git remote add origin <url>
$ git remote -v

$ git push -u origin master
$ git pull

$ git remote add <name> <address> 	To add new remotes
$ git remote rm <name>			To remove remotes
$ git push -u <name> <branch>		To push to remotes

$ heroku create
$ git push heroku master		To push to heroku

$ git clone <url>
$ git clone <url> <directory>

$ git branch
$ git branch <branch>
$ git checkout <branch>

$ echo "<message>" > <file.txt>
$ git add <file.txt>
$ git commit -m "<message>

$ ls

$ git merge <branch>
& git branch -d <branch>
$ git checkout -b <branch>

$ git checkout master master
Switched to branch 'master'
$ git branch
admin
* master
$ git pull
...
$ git add store.rb
$ git commit -m 'Fix store bug'
...
$ git add product.rb
$ git commit -m 'Fix product'
...
$ git push

Vi Commands
j down	k up	esc leave mode	:wq save & quit
h left	l right	i   insert mode	:q! cancel & quit

$ git fetch
$ git merge <branch1>/<branch2>

$ git branch -r
$ git remote show origin
$ git remote prune origin
$ git branch -D <branch>

$ git push heroku-staging staging
$ git push heroku-staging staging:master

$ git tag
$ git checkout <tag>
$ git tag -a <tag> -m "<message>"
$ git push --tags

$ git rebase
$ git rebase <branch>
$ git rebase --continue
$ git rebase --skip
$ git rebase --abort

$ git config --global color.ui true
$ git log --pretty=oneline
$ git log --pretty=format:"%h %ad- %s [%an]"

placeholder 	replaced with
%ad 		author date
%an 		author name
%h 		SHA hash
%s 		subject
%d 		ref names

$ git log --oneline -p
$ git log --oneline --stat
$ git log --oneline --graph

$ git log --until=1.minute.ago
$ git log --since=1.day.ago 				since (days)
$ git log --since=1.hour.ago 				since (hours)
$ git log --since=1.month.ago --until=2.weeks.ago 	since & until (relative)
$ git log --since=2000-01-01 --until=2012-12-21 	since & until (absolute)

$ git diff
$ git diff HEAD
$ git diff HEAD^	parent of latest commit
$ git diff HEAD^^ 	grandparent of latest commit
$ git diff HEAD~5 	five commits ago
$ git diff HEAD^..HEAD 	second most recent commit vs. most recent

$ git diff f5a6sdfsfsdfsdfff9..4sdsdfsdfsdfsdffb063f 	range of SHAs
$ git log --oneline
257256c cat
4fb063f Add index
f5a6ff9 Add catalog pages
$ git diff 4fb063f..f5a6ff9				range of abbreviated SHAs
$ git diff master bird 					diff between two branches
$ git diff --since=1.week.ago --until=1.minute.ago 	time-based diff

$ git blame index.html --date short

.git/info/exclude
experiments/ 	will exclude this folder from git

.gitignore
tutorial.mp4 	exclude this file
*.mp4 exclude 	all .mp4 files
experiments/ 	exclude directory
logs/*.log 	exclude .log files in logs directory

$ git rm README.txt
$ git status
# Changes to be committed:
#
# deleted: README.txt
DELETED from the local filesystem & untracked
$ git commit -m “Remove readme”

$ git config --global alias.mylog \
"log --pretty=format:'%h %s [%an]' --graph"

$ git config --global alias.lol \
"log --graph --decorate --pretty=oneline --abbrev-commit --all"

$ git mylog
* 19f735c Merge branch 'admin' [Jane]
|\
| * 7980856 Add user admin [Jane]
* | 5c9ed90 Add dashboard. [Jane]
|/
* ab48a3f Create quantum cat. [Jane]

$ git config --global alias.st status 	git st 	git status
$ git config --global alias.co checkout git co	git checkout
$ git config --global alias.br branch 	git br	git branch
$ git config --global alias.ci commit 	git ci	git commit

Interactive Rebase
$ git rebase -i <headposition>
Note: Cannot interactive rebase HEAD.
# Commands:
# p, pick = use commit
# r, reword = use commit, but edit the commit message
# e, edit = use commit, but stop for amending
# s, squash = use commit, but meld into previous commit
# f, fixup = like "squash", but discard this commit's log message
# x, exec = run command (the rest of the line) using shell

shortcut			sameas
$ git stash			$ git stash save
$ git stash apply		$ git stash apply stash0{0}
$ git stash drop		$ git stash drop stash0{0}
$ git stash pop			$ git stash apply + $ git stash drop

$ git stash branch <branchname> <stash0{0}>
$ git stash clear
$ git stash list
$ git stash list --stat
$ git stash show
$ git stash show --patch
$ git stash show stash0{0}
$ git stash save --keep-index	causes staging area not to be stashed
$ git stash save --include-untracked
$ git stash save "<message>"

$ git reset --hard HEAD

$ git log --patch

$ git filter-branch --tree-filter <command>
remove password.txt
$ git filter-branch --tree-filter 'rm -f passwords.txt'
remove any video files from any directory.
$ git filter-branch --tree-filter 'find . -name "*.mp4" -exec rm {} \;'
filter all commits in all branches
$ git filter-branch --tree-filter 'rm -f passwords.txt' -- --all
filter only current branch
$ git filter-branch --tree-filter 'rm -f passwords.txt' -- HEAD

$ git filter-branch --index-filter <command>
operates on working directory - has no effect
$ git filter-branch --index-filter 'rm -f passwords.txt'
operates on staging area - works
$ git filter-branch --index-filter 'git rm --cached --ignore-unmatch passwords.txt'
fails if file isn't present
$ git filter-branch --index-filter 'git rm --cached passwords.txt'
succeeds even if file isn't present
$ git filter-branch --index-filter 'git rm --cached --ignore-unmatch passwords.txt'

after running filter-branch - backup of tree is in .git directory
running again wont work because it wont override the backup
$ git filter-branch --tree-filter 'rm -f passwords.txt'
you can force it to rerun using the -f option.
$ git filter-branch -f --tree-filter 'rm -f passwords.txt'

--prune-empty drops commits that don't alter any files
$ git filter-branch -f --prune-empty -- --all

it is possible to prune during filtering also
$ git filter-branch --tree-filter 'rm -f passwords.txt' --prune-empty -- --all

